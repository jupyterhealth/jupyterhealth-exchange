"""
Schema discovery tools for LLM to learn database structure
"""
import json
from typing import Dict, Any


def get_jhe_schemas() -> Dict[str, Any]:
    """
    Return JHE database schema information for LLM learning

    Returns:
        Dictionary of schema information
    """
    return {
        "core_study": {
            "table": "core_study",
            "description": "Clinical research studies",
            "columns": [
                {"name": "id", "type": "bigint", "description": "Study identifier (primary key)"},
                {"name": "name", "type": "varchar", "description": "Study name"},
                {"name": "description", "type": "text", "description": "Study description"},
                {"name": "organization_id", "type": "bigint", "description": "FK to core_organization"},
                {"name": "icon_url", "type": "text", "description": "Optional study icon URL"}
            ],
            "relationships": [
                "Belongs to one Organization (via organization_id)",
                "Has many Patients (via core_studypatient M2M table)",
                "Has many scope requests (via core_studyscoperequest)"
            ]
        },
        "core_patient": {
            "table": "core_patient",
            "description": "Patient records with demographics",
            "columns": [
                {"name": "id", "type": "bigint", "description": "Patient identifier"},
                {"name": "jhe_user_id", "type": "bigint", "description": "FK to core_jheuser"},
                {"name": "identifier", "type": "varchar", "description": "External patient ID"},
                {"name": "name_family", "type": "varchar", "description": "Family name"},
                {"name": "name_given", "type": "varchar", "description": "Given name"},
                {"name": "birth_date", "type": "date", "description": "Date of birth"},
                {"name": "telecom_phone", "type": "varchar", "description": "Phone number"},
                {"name": "last_updated", "type": "timestamptz", "description": "Last update timestamp"}
            ],
            "relationships": [
                "Has one JheUser (via jhe_user_id)",
                "Belongs to many Organizations (via core_patientorganization M2M)",
                "Enrolled in many Studies (via core_studypatient M2M)",
                "Has many Observations (subject_patient_id)"
            ]
        },
        "core_observation": {
            "table": "core_observation",
            "description": "Health observations in FHIR format with OMH data",
            "columns": [
                {"name": "id", "type": "bigint", "description": "Observation identifier"},
                {"name": "subject_patient_id", "type": "bigint", "description": "FK to core_patient"},
                {"name": "codeable_concept_id", "type": "bigint", "description": "FK to core_codeableconcept (LOINC/OMH code)"},
                {"name": "data_source_id", "type": "bigint", "description": "FK to core_datasource (device)"},
                {"name": "value_attachment_data", "type": "jsonb", "description": "OMH data payload (base64 in FHIR)"},
                {"name": "status", "type": "varchar", "description": "final|preliminary|amended|etc"},
                {"name": "last_updated", "type": "timestamptz", "description": "Last update timestamp"}
            ],
            "relationships": [
                "Belongs to one Patient (via subject_patient_id)",
                "Has one CodeableConcept (via codeable_concept_id)",
                "Generated by one DataSource/Device (via data_source_id)"
            ],
            "note": "Observations store health data in Open mHealth format within FHIR Observation.valueAttachment"
        },
        "core_organization": {
            "table": "core_organization",
            "description": "Healthcare organizations and institutions",
            "columns": [
                {"name": "id", "type": "bigint", "description": "Organization identifier"},
                {"name": "name", "type": "varchar", "description": "Organization name"},
                {"name": "type", "type": "varchar", "description": "prov|edu|crs|laboratory|etc"},
                {"name": "part_of_id", "type": "bigint", "description": "FK to parent organization (nullable)"}
            ],
            "relationships": [
                "Has many Studies",
                "Has many Practitioners (via core_practitionerorganization M2M)",
                "Has many Patients (via core_patientorganization M2M)",
                "Can be part of parent Organization (hierarchical)"
            ]
        },
        "core_jheuser": {
            "table": "core_jheuser",
            "description": "User accounts (practitioners and patients)",
            "columns": [
                {"name": "id", "type": "bigint", "description": "User identifier"},
                {"name": "email", "type": "varchar", "description": "Email address (unique)"},
                {"name": "user_type", "type": "varchar", "description": "patient|practitioner"},
                {"name": "is_superuser", "type": "boolean", "description": "Admin flag"},
                {"name": "is_staff", "type": "boolean", "description": "Staff access flag"}
            ],
            "relationships": [
                "Has one Patient profile (via patient_profile)",
                "Has one Practitioner profile (via practitioner_profile)"
            ]
        },
        "permission_model": {
            "description": "JHE Role-Based Access Control",
            "roles": {
                "super_user": {
                    "permissions": ["data_source.manage", "organization.manage", "patient.manage", "study.manage"],
                    "description": "Full system access (Django superuser)"
                },
                "manager": {
                    "permissions": ["organization.manage", "patient.manage", "study.manage"],
                    "description": "Manage organization, patients, and studies"
                },
                "member": {
                    "permissions": ["patient.manage", "study.manage"],
                    "description": "Manage patients and studies within organization"
                },
                "viewer": {
                    "permissions": [],
                    "description": "Read-only access"
                }
            },
            "access_flow": "User → Practitioner → PractitionerOrganization (with role) → Organization → Study → Patients",
            "note": "Roles are stored in core_practitionerorganization.role field"
        }
    }


def get_schema_resource(uri: str) -> str:
    """
    Get schema resource by URI

    Args:
        uri: Resource URI (e.g., "schema://jupyterhealth/core_study")

    Returns:
        JSON string of schema information
    """
    schemas = get_jhe_schemas()

    # Extract table name from URI
    parts = uri.split('/')
    if len(parts) >= 3:
        table_name = parts[-1]
        if table_name in schemas:
            return json.dumps(schemas[table_name], indent=2)

    return json.dumps({"error": "Schema not found"}, indent=2)
